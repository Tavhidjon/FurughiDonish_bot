# filepath: server.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from typing import Dict, Any
from flask import Flask, request

# --- Flask app for keeping the bot alive on Render ---
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

@app.route('/_health')
def health():
    return "OK"

# --- Environment Setup ---

# --- Logging Configuration ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Security ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7577992673:AAFwhaTnguPIZNLRsjEvKOHeluHmYZdN7Mc")
if not TOKEN:
    raise ValueError("No TELEGRAM_BOT_TOKEN found in environment variables")

PORT = int(os.environ.get("PORT", 8080))
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# --- Constants ---
SUPPORTED_LANGUAGES = ['tj', 'ru', 'en']
DEFAULT_LANGUAGE = 'en'
ADMIN_USERNAME = "@admin_furughi_donish"
SUPPORT_EMAIL = "support@furughi-donish.tj"
WEBSITE_URL = "https://furughi-donish.tj"

# --- Database Simulation ---
# In a production environment, replace with a real database connection
user_data_db: Dict[int, Dict[str, Any]] = {}

# --- Multilingual Content ---
TEXTS = {
    'tj': {
        'start': "üëã –°–∞–ª–æ–º, {name}! –ë–∞ –±–æ—Ç–∏ —Ä–∞—Å–º–∏–∏ <b>–§—É—Ä—É–≥–∏ –î–æ–Ω–∏—à</b> —Ö—É—à –æ–º–∞–¥–µ–¥!\n\n–ú–æ —è–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ —Ç–∞—ä–ª–∏–º”£ –±–æ –∏–º–∫–æ–Ω–æ—Ç–∏ –∑–∏—ë–¥ –±–∞—Ä–æ–∏ –º—É–∞–ª–ª–∏–º–æ–Ω –≤–∞ –¥–æ–Ω–∏—à“∑”Ø—ë–Ω –º–µ–±–æ—à–µ–º.",
        'help': "üÜò <b>–†–æ“≥–Ω–∞–º–æ–∏ –∫–æ—Ä–±–∞—Ä”£</b>\n\n/start - –û“ì–æ–∑–∏ –±–æ—Ç\n/help - –†–æ“≥–Ω–∞–º–æ\n/about - –î–∞—Ä –±–æ—Ä–∞–∏ –ª–æ–∏“≥–∞\n/feedback - –§–∏–∫—Ä—É –ø–µ—à–Ω–∏“≥–æ–¥“≥–æ\n/language - –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n–ë–∞—Ä–æ–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –±–µ—à—Ç–∞—Ä —Ç—É–≥–º–∞“≥–æ–∏ –∑–µ—Ä—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'about': "üéì <b>–§—É—Ä—É–≥–∏ –î–æ–Ω–∏—à</b> ‚Äî –ª–æ–∏“≥–∞–∏ —Ç–∞—ä–ª–∏–º–∏–∏ –∏–Ω–Ω–æ–≤–∞—Ç—Å–∏–æ–Ω”£ –±–∞—Ä–æ–∏ –º—É—Å—Ç–∞“≥–∫–∞–º –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞—Ä–æ–≤–∞–Ω–¥–∏ —Ç–∞—ä–ª–∏–º –¥–∞—Ä –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω.\n\n<b>–ú–∞“õ—Å–∞–¥“≥–æ:</b>\n‚Ä¢ –¢–∞—ä–º–∏–Ω –∫–∞—Ä–¥–∞–Ω–∏ –≤–æ—Å–∏—Ç–∞“≥–æ–∏ –º—É–æ—Å–∏—Ä –±–∞—Ä–æ–∏ –æ–º”Ø–∑–∏—à\n‚Ä¢ –≠“∑–æ–¥–∏ —Ñ–∞–∑–æ–∏ –∏“∑—Ç–∏–º–æ”£ –±–∞—Ä–æ–∏ –º—É–±–æ–¥–∏–ª–∞–∏ –∏–ª–º”£\n‚Ä¢ –î–∞—Å—Ç–≥–∏—Ä–∏–∏ –∏–∂–æ–¥–∏—ë–Ω–∏ –∏–ª–º”£\n\n<b>“≤–∞–¥–∞—Ñ“≥–æ:</b>\n‚Ä¢ 10,000 –∫–æ—Ä–±–∞—Ä–∏ —Ñ–∞—ä–æ–ª —Ç–æ –æ—Ö–∏—Ä–∏ —Å–æ–ª–∏ 2025\n‚Ä¢ 5,000 –º–∞–Ω–±–∞—ä–∏ –∏–ª–º”£ –¥–∞—Ä –∫–∏—Ç–æ–±—Ö–æ–Ω–∞\n‚Ä¢ 100% –¥–∞—Å—Ç–≥–∏—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£",
        'services': "üîß <b>–•–∏–¥–º–∞—Ç“≥–æ–∏ –º–æ</b>:\n\n‚Ä¢ üìö <b>–ö–∏—Ç–æ–±—Ö–æ–Ω–∞–∏ —Ä–∞“õ–∞–º”£</b> –±–æ –∑–∏—ë–¥–∞ –∞–∑ 1,000 –∫–∏—Ç–æ–± –≤–∞ –º–∞“õ–æ–ª–∞\n‚Ä¢ üí¨ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ —Å–∞–≤–æ–ª—É “∑–∞–≤–æ–±</b> –±–æ –¥–∞—Å—Ç–≥–∏—Ä–∏–∏ AI\n‚Ä¢ ü§ñ <b>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∏ –∞“õ–ª–∏ —Å—É–Ω—ä”£</b> –±–∞—Ä–æ–∏ –∫”Ø–º–∞–∫ –¥–∞—Ä –≤–∞–∑–∏—Ñ–∞“≥–æ\n‚Ä¢ üìÇ <b>–°–∏—Å—Ç–µ–º–∞–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫—É—Ä—Å“≥–æ</b>\n‚Ä¢ üé• <b>–í–∏–¥—ë–æ-–¥–∞—Ä—Å“≥–æ</b> –∞–∑ –±–µ“≥—Ç–∞—Ä–∏–Ω –º—É–∞–ª–ª–∏–º–æ–Ω\n‚Ä¢ üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞–∏ –ø–µ—à—Ä–∞—Ñ—Ç</b> –±–∞—Ä–æ–∏ –¥–æ–Ω–∏—à“∑”Ø—ë–Ω",
        'teachers': "üë®‚Äçüè´ <b>–ë–∞—Ä–æ–∏ –º—É–∞–ª–ª–∏–º–æ–Ω</b>:\n\n‚Ä¢ –¢–∞–π—ë—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ç–µ—Å—Ç“≥–æ, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç—Å–∏—è“≥–æ –≤–∞ –≤–∞–∑–∏—Ñ–∞“≥–æ\n‚Ä¢ –ù–∞–∑–æ—Ä–∞—Ç–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ –¥–æ–Ω–∏—à“∑”Ø—ë–Ω –±–æ –≥—Ä–∞—Ñ–∏–∫“≥–æ–∏ —Ç–∞—Ñ—Å–∏–ª”£\n‚Ä¢ –¢–∞“õ—Å–∏–º–æ—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∏ –æ–º”Ø–∑–∏—à–≥–æ“≥“≥–æ\n‚Ä¢ –≠“∑–æ–¥–∏ –∫—É—Ä—Å“≥–æ–∏ —à–∞—Ö—Å”£\n‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ –º—É–±–æ–¥–∏–ª–∞–∏ —Ç–∞“∑—Ä–∏–±–∞\n‚Ä¢ –î–∞—Å—Ç–≥–∏—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£ 24/7",
        'students': "üéì <b>–ë–∞—Ä–æ–∏ –¥–æ–Ω–∏—à“∑”Ø—ë–Ω</b>:\n\n‚Ä¢ –î–∞—Å—Ç—Ä–∞—Å”£ –±–∞ “≥–∞–º–∞–∏ –º–∞–Ω–±–∞—ä“≥–æ –¥–∞—Ä —è–∫ “∑–æ\n‚Ä¢ “∂–∞–≤–æ–±“≥–æ–∏ —Ñ–∞–≤—Ä–∏–∏ –±–∞ —Å–∞–≤–æ–ª“≥–æ\n‚Ä¢ –û–º”Ø–∑–∏—à–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤”£ –±–æ AI\n‚Ä¢ –ù–∞–∑–æ—Ä–∞—Ç–∏ –ø–µ—à—Ä–∞—Ñ—Ç–∏ —à–∞—Ö—Å”£\n‚Ä¢ –ò–º—Ç–∏“≥–æ–Ω“≥–æ–∏ –º–æ–¥–µ–ª–∏\n‚Ä¢ –ì—É—Ä”Ø“≥“≥–æ–∏ —Ç–∞“≥—Å–∏–ª”£",
        'contact': f"üì¨ <b>–¢–∞–º–æ—Å –±–æ –¥–∞—Å—Ç–≥–æ“≥</b>\n\n‚Ä¢ –ê–¥–º–∏–Ω: {ADMIN_USERNAME}\n‚Ä¢ –ü–æ—á—Ç–∞–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω”£: {SUPPORT_EMAIL}\n‚Ä¢ –°–æ–º–æ–Ω–∞: {WEBSITE_URL}\n‚Ä¢ –†–∞–±–æ—Ç–æ–µ –≤—Ä–µ–º—è: 08:00-20:00 (Dushanbe time)\n\n–ë–∞—Ä–æ–∏ —Å–∞–≤–æ–ª“≥–æ–∏ –∑—É–¥“∑–∞–≤–æ–± –ø–∞–π–≤–∞—Å—Ç —à–∞–≤–µ–¥ –±–∞ –∞–¥–º–∏–Ω.",
        'feedback': "‚úçÔ∏è –õ—É—Ç—Ñ–∞–Ω —Ñ–∏–∫—Ä—É –ø–µ—à–Ω–∏“≥–æ–¥“≥–æ–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä –±–æ—Ä–∞–∏ —Ö–∏–¥–º–∞—Ç“≥–æ–∏ –º–æ –Ω–∞–≤–∏—Å–µ–¥. –ú–æ “≥–∞–º–∞–∏ —Ñ–∏–∫—Ä“≥–æ—Ä–æ –±–æ —ç“≥—Ç–∏—Ä–æ–º –º–µ–æ–º”Ø–∑–µ–º –≤–∞ –±–∞—Ä–æ–∏ —Ç–∞–∫–º–∏–ª–∏ —Ö–∏–¥–º–∞—Ç“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –º–µ–±–∞—Ä–µ–º.",
        'language': "üåê –ó–∞–±–æ–Ω–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'back': "‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç",
        'error': "‚ùå –•–∞—Ç–æ–∏ —Å–∏—Å—Ç–µ–º–∞. –õ—É—Ç—Ñ–∞–Ω –±–∞—ä–¥—Ç–∞—Ä –∞–∑ –Ω–∞–≤ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥ —ë –±–æ –¥–∞—Å—Ç–≥–æ“≥ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥.",
        'feedback_received': "‚úÖ –§–∏–∫—Ä–∏ —à—É–º–æ “õ–∞–±—É–ª —à—É–¥! –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –∫”Ø–º–∞–∫–∏ —à—É–º–æ.",
        'unauthorized': "‚õî –î–∞—Å—Ç—Ä–∞—Å–∏–∏ –º–∞“≥–¥—É–¥. –®—É–º–æ –∏“∑–æ–∑–∞—Ç–∏ –∏–Ω –∞–º–∞–ª—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥."
    },
    'ru': {
        'start': "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ <b>Furugi Donish</b>!\n\n–ú—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å —à–∏—Ä–æ–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
        'help': "üÜò <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ü–æ–º–æ—â—å\n/about - –û –ø—Ä–æ–µ–∫—Ç–µ\n/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n/language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        'about': "üéì <b>Furugi Donish</b> ‚Äî –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ.\n\n<b>–¶–µ–ª–∏:</b>\n‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤\n\n<b>–ó–∞–¥–∞—á–∏:</b>\n‚Ä¢ 10,000 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–æ–Ω—Ü—É 2025\n‚Ä¢ 5,000 –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\n‚Ä¢ 100% —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        'services': "üîß <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏</b>:\n\n‚Ä¢ üìö <b>–¶–∏—Ñ—Ä–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</b> —Å –±–æ–ª–µ–µ —á–µ–º 1,000 –∫–Ω–∏–≥ –∏ —Å—Ç–∞—Ç–µ–π\n‚Ä¢ üí¨ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤</b> —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò\n‚Ä¢ ü§ñ <b>–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> –¥–ª—è –ø–æ–º–æ—â–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏\n‚Ä¢ üìÇ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏</b>\n‚Ä¢ üé• <b>–í–∏–¥–µ–æ—É—Ä–æ–∫–∏</b> –æ—Ç –ª—É—á—à–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</b> –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
        'teachers': "üë®‚Äçüè´ <b>–î–ª—è —É—á–∏—Ç–µ–ª–µ–π</b>:\n\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º\n‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        'students': "üéì <b>–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</b>:\n\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ò–ò\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ —Ç–µ—Å—Ç—ã\n‚Ä¢ –£—á–µ–±–Ω—ã–µ –≥—Ä—É–ø–ø—ã",
        'contact': f"üì¨ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n‚Ä¢ –ê–¥–º–∏–Ω: {ADMIN_USERNAME}\n‚Ä¢ –≠–ª. –ø–æ—á—Ç–∞: {SUPPORT_EMAIL}\n‚Ä¢ –°–∞–π—Ç: {WEBSITE_URL}\n‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 08:00-20:00 (–î—É—à–∞–Ω–±–µ)\n\n–î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
        'feedback': "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. –ú—ã —Ü–µ–Ω–∏–º –≤—Å–µ –º–Ω–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.",
        'language': "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'error': "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        'feedback_received': "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å.",
        'unauthorized': "‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
    },
    'en': {
        'start': "üëã Hello, {name}! Welcome to the official <b>Furugi Donish</b> bot!\n\nWe are an educational platform with extensive features for teachers and students.",
        'help': "üÜò <b>Help Guide</b>\n\n/start - Start the bot\n/help - Show help\n/about - About the project\n/feedback - Provide feedback\n/language - Change interface language\n\nFor more information, use the buttons below.",
        'about': "üéì <b>Furugi Donish</b> is an innovative educational project aimed at enhancing the learning process in Tajikistan.\n\n<b>Goals:</b>\n‚Ä¢ Providing modern learning tools\n‚Ä¢ Creating a scientific community\n‚Ä¢ Supporting creative initiatives\n\n<b>Targets:</b>\n‚Ä¢ 10,000 active users by end of 2025\n‚Ä¢ 5,000 educational resources in library\n‚Ä¢ 100% technical support coverage",
        'services': "üîß <b>Our Services</b>:\n\n‚Ä¢ üìö <b>Digital library</b> with 1,000+ books and articles\n‚Ä¢ üí¨ <b>Q&A platform</b> with AI support\n‚Ä¢ ü§ñ <b>AI assistant</b> for homework help\n‚Ä¢ üìÇ <b>Course management system</b>\n‚Ä¢ üé• <b>Video lessons</b> from top teachers\n‚Ä¢ üìä <b>Progress analytics</b> for students",
        'teachers': "üë®‚Äçüè´ <b>For Teachers</b>:\n\n‚Ä¢ Create tests, presentations and assignments\n‚Ä¢ Monitor student activity with detailed stats\n‚Ä¢ Automatically distribute lessons\n‚Ä¢ Create personal courses\n‚Ä¢ Experience sharing platform\n‚Ä¢ 24/7 technical support",
        'students': "üéì <b>For Students</b>:\n\n‚Ä¢ Access all resources in one place\n‚Ä¢ Get instant answers to questions\n‚Ä¢ Interactive learning with AI\n‚Ä¢ Personal progress tracking\n‚Ä¢ Practice tests\n‚Ä¢ Study groups",
        'contact': f"üì¨ <b>Contact Information</b>\n\n‚Ä¢ Admin: {ADMIN_USERNAME}\n‚Ä¢ Email: {SUPPORT_EMAIL}\n‚Ä¢ Website: {WEBSITE_URL}\n‚Ä¢ Working hours: 08:00-20:00 (Dushanbe time)\n\nFor urgent questions, contact the admin.",
        'feedback': "‚úçÔ∏è Please write your feedback about our services. We value all opinions and use them to improve our service.",
        'language': "üåê Choose interface language:",
        'back': "‚¨ÖÔ∏è Back",
        'error': "‚ùå System error. Please try again later or contact support.",
        'feedback_received': "‚úÖ Your feedback has been received! Thank you for your help.",
        'unauthorized': "‚õî Access restricted. You don't have permission for this action."
    }
}

# --- Utility Functions ---
def get_user_language(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> str:
    """Get user's preferred language from context or database."""
    if context.user_data.get('lang'):
        return context.user_data['lang']
    if user_id in user_data_db and 'lang' in user_data_db[user_id]:
        return user_data_db[user_id]['lang']
    return DEFAULT_LANGUAGE

def save_user_language(user_id: int, language: str):
    """Save user's language preference to database."""
    if user_id not in user_data_db:
        user_data_db[user_id] = {}
    user_data_db[user_id]['lang'] = language

# --- Command Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send welcome message and main menu."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        # Log user start
        logger.info(f"User {user.id} ({user.full_name}) started the bot")

        text = TEXTS[lang]['start'].format(name=user.first_name)

        keyboard = [
            [
                InlineKeyboardButton("üáπüáØ TJ", callback_data='lang_tj'),
                InlineKeyboardButton("üá∑üá∫ RU", callback_data='lang_ru'),
                InlineKeyboardButton("üá¨üáß EN", callback_data='lang_en')
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è " + TEXTS[lang]['about'].split('\n')[0][4:17], callback_data='about'),
                InlineKeyboardButton("üìö " + TEXTS[lang]['services'].split('\n')[0][4:17], callback_data='services')
            ],
            [
                InlineKeyboardButton("üë®‚Äçüè´ " + TEXTS[lang]['teachers'].split('\n')[0][4:17], callback_data='teachers'),
                InlineKeyboardButton("üéì " + TEXTS[lang]['students'].split('\n')[0][4:17], callback_data='students')
            ],
            [
                InlineKeyboardButton("üì¨ " + TEXTS[lang]['contact'].split('\n')[0][4:17], callback_data='contact'),
                InlineKeyboardButton("‚úçÔ∏è Feedback", callback_data='feedback')
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await handle_error(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send help information."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        keyboard = [[InlineKeyboardButton(TEXTS[lang]['back'], callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(TEXTS[lang]['help'], reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        logger.error(f"Error in help handler: {e}")
        await handle_error(update, context)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send information about the project."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        keyboard = [[InlineKeyboardButton(TEXTS[lang]['back'], callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(TEXTS[lang]['about'], reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        logger.error(f"Error in about handler: {e}")
        await handle_error(update, context)

async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle feedback command."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        context.user_data['awaiting_feedback'] = True
        keyboard = [[InlineKeyboardButton(TEXTS[lang]['back'], callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(TEXTS[lang]['feedback'], reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        logger.error(f"Error in feedback handler: {e}")
        await handle_error(update, context)

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle language selection command."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        keyboard = [
            [
                InlineKeyboardButton("üáπüáØ –¢–æ“∑–∏–∫”£", callback_data='lang_tj'),
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
                InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')
            ],
            [InlineKeyboardButton(TEXTS[lang]['back'], callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(TEXTS[lang]['language'], reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        logger.error(f"Error in language handler: {e}")
        await handle_error(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle regular text messages."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id)
        
        if context.user_data.get('awaiting_feedback'):
            # Process feedback
            feedback = update.message.text
            logger.info(f"Feedback from user {user.id}: {feedback}")
            
            # Here you would typically save feedback to database or send to admin
            # For now, we'll just log it and confirm receipt
            
            context.user_data['awaiting_feedback'] = False
            await update.message.reply_text(TEXTS[lang]['feedback_received'], parse_mode='HTML')
            
            # Return to main menu
            await start(update, context)
        else:
            # Handle other messages
            await update.message.reply_text(
                TEXTS[lang]['help'],
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error in message handler: {e}")
        await handle_error(update, context)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks."""
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        lang = get_user_language(context, user.id)
        
        if query.data.startswith('lang_'):
            # Language selection
            new_lang = query.data.split('_')[1]
            context.user_data['lang'] = new_lang
            save_user_language(user.id, new_lang)
            logger.info(f"User {user.id} changed language to {new_lang}")
            await start(update, context)
            
        elif query.data in ['about', 'services', 'teachers', 'students', 'contact', 'feedback']:
            # Content sections
            text = TEXTS[lang][query.data]
            keyboard = [[InlineKeyboardButton(TEXTS[lang]['back'], callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            
        elif query.data == 'back':
            # Back to main menu
            await start(update, context)
            
    except Exception as e:
        logger.error(f"Error in button handler: {e}")
        await handle_error(update, context)

async def handle_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors gracefully."""
    try:
        user = update.effective_user
        lang = get_user_language(context, user.id if user else None)
        
        error_message = TEXTS[lang]['error']
        
        if update.message:
            await update.message.reply_text(error_message, parse_mode='HTML')
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_message, parse_mode='HTML')
            
        logger.error(f"Error handled for user {user.id if user else 'unknown'}")
    except Exception as e:
        logger.critical(f"Critical error in error handler: {e}")

# --- Main Function ---
def main():
    """Start the bot."""
    try:
        # Create the Application
        application = Application.builder().token(TOKEN).build()

        # Add command handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("about", about_command))
        application.add_handler(CommandHandler("feedback", feedback_command))
        application.add_handler(CommandHandler("language", language_command))
        
        # Add button handler
        application.add_handler(CallbackQueryHandler(button_click))
        
        # Add message handler
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # Add error handler
        application.add_error_handler(handle_error)

        # Start the Bot using webhook if URL is configured, otherwise use polling
        logger.info("Starting bot...")
        
        if WEBHOOK_URL:
            # Set webhook
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=TOKEN,
                webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
            )
            logger.info(f"Bot started with webhook on port {PORT}")
        else:
            # Start polling
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            logger.info("Bot started with polling")
        
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    # Run Flask app in development
    if os.environ.get("ENVIRONMENT") == "development":
        main()
    else:
        # For production on Render, run the bot in a separate thread
        import threading
        bot_thread = threading.Thread(target=main)
        bot_thread.start()
        
        # Start Flask app
        app.run(host="0.0.0.0", port=PORT)
